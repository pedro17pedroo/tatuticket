import OpenAI from 'openai';
import { config } from '../config/app.config';

interface AIAnalysisResult {
  sentiment: 'positive' | 'neutral' | 'negative' | 'urgent';
  priority: 'low' | 'medium' | 'high' | 'critical';
  category: string;
  suggestedResponse?: string;
  confidence: number;
}

interface TicketSuggestion {
  title: string;
  category: string;
  priority: 'low' | 'medium' | 'high' | 'critical';
  estimatedTime: number; // in hours
  tags: string[];
}

class AIService {
  private client: OpenAI | null = null;
  private initialized = false;

  constructor() {
    this.initialize();
  }

  private initialize() {
    if (!config.ai.enabled) {
      console.warn('ü§ñ AI service disabled - OpenAI API key missing');
      return;
    }

    try {
      this.client = new OpenAI({
        apiKey: config.ai.openai.apiKey,
      });

      this.initialized = true;
      console.log('ü§ñ AI service initialized');
    } catch (error) {
      console.error('‚ùå Failed to initialize AI service:', error);
    }
  }

  async analyzeTicket(subject: string, description: string): Promise<AIAnalysisResult> {
    if (!this.initialized || !this.client) {
      console.warn('ü§ñ AI service not available - returning default analysis');
      return {
        sentiment: 'neutral',
        priority: 'medium',
        category: 'general',
        confidence: 0.1,
      };
    }

    try {
      const prompt = `
        Analise o seguinte ticket de suporte e forne√ßa uma an√°lise estruturada:
        
        Assunto: ${subject}
        Descri√ß√£o: ${description}
        
        Por favor, retorne uma an√°lise JSON com:
        - sentiment: 'positive', 'neutral', 'negative', ou 'urgent'
        - priority: 'low', 'medium', 'high', ou 'critical'
        - category: categoria do problema (ex: 'technical', 'billing', 'feature_request')
        - suggestedResponse: sugest√£o de resposta inicial (opcional)
        - confidence: n√≠vel de confian√ßa da an√°lise (0-1)
      `;

      const response = await this.client.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 500,
        temperature: 0.3,
      });

      const content = response.choices[0]?.message?.content;
      if (!content) {
        throw new Error('No response from AI service');
      }

      try {
        const analysis = JSON.parse(content) as AIAnalysisResult;
        console.log('ü§ñ Ticket analysis completed');
        return analysis;
      } catch (parseError) {
        console.warn('ü§ñ Failed to parse AI response, returning default');
        return {
          sentiment: 'neutral',
          priority: 'medium',
          category: 'general',
          confidence: 0.3,
        };
      }
    } catch (error) {
      console.error('‚ùå Failed to analyze ticket:', error);
      return {
        sentiment: 'neutral',
        priority: 'medium',
        category: 'general',
        confidence: 0.1,
      };
    }
  }

  async generateTicketSuggestions(userMessage: string): Promise<TicketSuggestion[]> {
    if (!this.initialized || !this.client) {
      return [];
    }

    try {
      const prompt = `
        Com base na seguinte mensagem do usu√°rio, sugira at√© 3 categorias de ticket poss√≠veis:
        
        Mensagem: "${userMessage}"
        
        Retorne um array JSON de sugest√µes com:
        - title: t√≠tulo sugerido para o ticket
        - category: categoria
        - priority: prioridade estimada
        - estimatedTime: tempo estimado em horas
        - tags: array de tags relevantes
      `;

      const response = await this.client.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 400,
        temperature: 0.4,
      });

      const content = response.choices[0]?.message?.content;
      if (!content) return [];

      try {
        return JSON.parse(content) as TicketSuggestion[];
      } catch (parseError) {
        console.warn('ü§ñ Failed to parse suggestions response');
        return [];
      }
    } catch (error) {
      console.error('‚ùå Failed to generate ticket suggestions:', error);
      return [];
    }
  }

  async generateAutoResponse(ticketSubject: string, ticketDescription: string): Promise<string | null> {
    if (!this.initialized || !this.client) {
      return null;
    }

    try {
      const prompt = `
        Gere uma resposta autom√°tica profissional e √∫til para o seguinte ticket de suporte:
        
        Assunto: ${ticketSubject}
        Descri√ß√£o: ${ticketDescription}
        
        A resposta deve:
        - Ser emp√°tica e profissional
        - Reconhecer o problema do usu√°rio
        - Fornecer pr√≥ximos passos ou informa√ß√µes √∫teis
        - Ser concisa (m√°ximo 200 palavras)
      `;

      const response = await this.client.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 300,
        temperature: 0.6,
      });

      const content = response.choices[0]?.message?.content;
      console.log('ü§ñ Auto-response generated');
      return content || null;
    } catch (error) {
      console.error('‚ùå Failed to generate auto-response:', error);
      return null;
    }
  }

  async summarizeTicketHistory(ticketHistory: Array<{ message: string; timestamp: Date }>): Promise<string> {
    if (!this.initialized || !this.client || ticketHistory.length === 0) {
      return 'Hist√≥rico n√£o dispon√≠vel.';
    }

    try {
      const historyText = ticketHistory
        .map(entry => `${entry.timestamp.toISOString()}: ${entry.message}`)
        .join('\n');

      const prompt = `
        Resuma o seguinte hist√≥rico de ticket de forma concisa e organizada:
        
        ${historyText}
        
        Forne√ßa um resumo que destaque:
        - Problema principal
        - A√ß√µes tomadas
        - Status atual
        - Pr√≥ximos passos (se aplic√°vel)
      `;

      const response = await this.client.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [{ role: 'user', content: prompt }],
        max_tokens: 250,
        temperature: 0.3,
      });

      return response.choices[0]?.message?.content || 'Resumo n√£o dispon√≠vel.';
    } catch (error) {
      console.error('‚ùå Failed to summarize ticket history:', error);
      return 'Erro ao gerar resumo.';
    }
  }

  isEnabled(): boolean {
    return this.initialized;
  }
}

export const aiService = new AIService();